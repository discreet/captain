#!/usr/bin/ruby
#
# this script is used to validate the format of a commit message. The format is
# based on the best practice standards taught in the SSE Dojo and can be
# referenced in the SSE GitHub organization GitWorkshop project. If any part of
# the commit message does not conform you will be prompted to amend the commit.
#
require_relative '../lib/captain'

editor = ENV['EDITOR'] != 'none' ? ENV['EDITOR'] : 'vim'
message_file = File.readlines(ARGV[0])
commit_msg = []

rules = Captain::Rules.new(message_file)

unless rules.validate!
  commit_msg.push("\n", '#GIT COMMIT MESSAGE FORMAT ERRORS:', "\n")
  rules.errors.each { |err| commit_msg.push("# #{err}") }
  commit_msg.push("\n")
  message_file.each { |line| commit_msg.push(line) }

  print 'Invalid git commit message format. Press y to edit and n to cancel the commit. [y/n]: '
  STDIN.reopen('/dev/tty')
  choice = $stdin.gets.chomp
  exit 1 if %w[no n].include?(choice.downcase)
  system("#{editor} #{message_file}") if %w[yes y].include?(choice.downcase)
end

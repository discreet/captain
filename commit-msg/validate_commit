#!/usr/bin/ruby
#
# this script is used to validate the format of a commit message. The format is
# based on the best practice standards taught in the SSE Dojo and can be
# referenced in the SSE GitHub organization GitWorkshop project. If any part of
# the commit message does not conform you will be prompted to amend the commit.
#
require_relative '../lib/captain'

editor = ENV['EDITOR'] != 'none' ? ENV['EDITOR'] : 'vim'
message_file = ARGV[0]

loop do
  rules = Captain::Rules.new(File.readlines(message_file))

  unless rules.validate!
    File.open(message_file, 'w') do |file|
      file.puts '#GIT COMMIT MESSAGE FORMAT ERRORS:'
      rules.errors.each { |err| file.puts "# #{err}" }
      file.puts '#'
      rules.lines.each { |line| file.puts line }
    end

    puts 'Invalid git commit message format.'
    puts rules.errors
    print 'Press y to edit and n to cancel the commit. [y/n]: '
    STDIN.reopen('/dev/tty')
    choice = $stdin.gets.chomp

    exit 1 if %w[no n].include?(choice.downcase)
    next if system("#{editor} #{message_file}") if %w[yes y].include?(choice.downcase)
  end
  break
end

#!/usr/bin/ruby
#
# this script is used to validate the format of a commit message. The format is
# based on the best practice standards taught in the SSE Dojo and can be
# referenced in the SSE GitHub organization GitWorkshop project. If any part of
# the commit message does not conform you will be prompted to amend the commit.
#
require_relative '../lib/captain'

editor = ENV['EDITOR'] != 'none' ? ENV['EDITOR'] : 'vim'
message_file = ARGV[0]
commit_msg = []

rules = Captain::Rules.new(message_file)

File.open(message_file, 'r').each do |line|
  commit_msg.push line
end

unless rules.validate!
  File.open(message_file, 'w') do |file|
    file.puts "\n#GIT COMMIT MESSAGE FORMAT ERRORS:"
    rules.errors.each { |err| file.puts "# #{err}" }
    file.puts "\n"
    commit_msg.each { |line| file.puts line }
  end

  print 'Invalid git commit message format. Press y to edit and n to cancel \
  the commit. [y/n]: '
  choice = $stdin.gets.chomp
  exit 1 if %w[no n].include?(choice.downcase)
  system("#{editor} #{message_file}") if %w[yes y].include?(choice.downcase)
end
